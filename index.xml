<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>onenote</title>
    <link>https://onenote.bytectl.com/</link>
    <description>Recent content on onenote</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 11 Oct 2019 19:08:37 +0800</lastBuildDate>
    
	<atom:link href="https://onenote.bytectl.com/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>About</title>
      <link>https://onenote.bytectl.com/about/</link>
      <pubDate>Thu, 10 Oct 2019 19:20:37 +0800</pubDate>
      
      <guid>https://onenote.bytectl.com/about/</guid>
      <description> graph TD Start -- Stop  graph LR A --- B B--C[fa:fa-ban forbidden] B--D(fa:fa-spinner);  </description>
    </item>
    
    <item>
      <title>sql操作</title>
      <link>https://onenote.bytectl.com/post/lang/sql/%E4%BB%B7%E5%80%BCsql/</link>
      <pubDate>Fri, 11 Oct 2019 19:08:37 +0800</pubDate>
      
      <guid>https://onenote.bytectl.com/post/lang/sql/%E4%BB%B7%E5%80%BCsql/</guid>
      <description>登录 1 mysql -h localhost -uroot -proot 数据库操作 创建数据库 1 create database dbname charset utf8 查看数据库 1 show databases; 选择数据库 1 use dbname; 删除数据库 1 drop database dbname; 表操作 创建数据表 1 2 3 4 5 create table tbname ( id int(10) primary key</description>
    </item>
    
    <item>
      <title>Sql操作</title>
      <link>https://onenote.bytectl.com/post/lang/sql/sql%E6%93%8D%E4%BD%9C/</link>
      <pubDate>Fri, 11 Oct 2019 19:08:35 +0800</pubDate>
      
      <guid>https://onenote.bytectl.com/post/lang/sql/sql%E6%93%8D%E4%BD%9C/</guid>
      <description>导出数据库 1 mysqldump -u root -p -h xxx -P 3306 数据库 [表名] &amp;gt;xxx.sql 导入数据 1 2 3 create database 数据库名称; use 数据库; source xxx.sql 自定义排序 1 SELECT * FROM `user_contacts` ORDER BY initial REGEXP &amp;#39;^[a-z]&amp;#39; desc, initial 不存在则插入, 存在</description>
    </item>
    
    <item>
      <title>Mysql测试2</title>
      <link>https://onenote.bytectl.com/post/lang/sql/mysql%E6%B5%8B%E8%AF%95/</link>
      <pubDate>Fri, 11 Oct 2019 19:08:32 +0800</pubDate>
      
      <guid>https://onenote.bytectl.com/post/lang/sql/mysql%E6%B5%8B%E8%AF%95/</guid>
      <description>批量插入用户 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 delimiter $$ drop procedure if exists `user_proc`; create procedure `user_proc`(</description>
    </item>
    
    <item>
      <title>Python环境</title>
      <link>https://onenote.bytectl.com/post/lang/python/python/</link>
      <pubDate>Fri, 11 Oct 2019 19:07:03 +0800</pubDate>
      
      <guid>https://onenote.bytectl.com/post/lang/python/python/</guid>
      <description>1. 下载安装 1 直接运行安装包即可 2. 配置 包控制器 pip 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 https://pypi.python.org/pypi # 下载 wget https://pypi.python.org/packages/11/b6/abcb525026a4be042b486df43905d6893fb04f05aac21c32c638e939e447/pip-9.0.1.tar.gz#md5=35f01da33009719497f01a4ba69d63c9 # 解压 tar -zxvf pip-9.0.1.tar.gz # 安装 cd pip-9.0.1/ python setup.py install # 安装 mysql-python pip install MySQL-python 镜像 1 2 3</description>
    </item>
    
    <item>
      <title>Npm</title>
      <link>https://onenote.bytectl.com/post/lang/nodejs/npm/</link>
      <pubDate>Fri, 11 Oct 2019 19:06:09 +0800</pubDate>
      
      <guid>https://onenote.bytectl.com/post/lang/nodejs/npm/</guid>
      <description>创建package.json 1 npm init 下载包(并保存到package.json依赖中) 1 npm install xxx --save</description>
    </item>
    
    <item>
      <title>Lua</title>
      <link>https://onenote.bytectl.com/post/lang/lua/lua/</link>
      <pubDate>Fri, 11 Oct 2019 19:05:28 +0800</pubDate>
      
      <guid>https://onenote.bytectl.com/post/lang/lua/lua/</guid>
      <description>lua 简介 Lua 是一种轻量小巧的脚本语言，用标准C语言编写并以源代码形式开放， 其设计目的是为了嵌入应用程序中，从而为应用程序提供灵活的扩展和定制功能</description>
    </item>
    
    <item>
      <title>go语法</title>
      <link>https://onenote.bytectl.com/post/lang/golang/go%E8%AF%AD%E6%B3%95/</link>
      <pubDate>Fri, 11 Oct 2019 19:03:35 +0800</pubDate>
      
      <guid>https://onenote.bytectl.com/post/lang/golang/go%E8%AF%AD%E6%B3%95/</guid>
      <description>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70</description>
    </item>
    
    <item>
      <title>Vscode&#43;go</title>
      <link>https://onenote.bytectl.com/post/lang/golang/vscode&#43;go/</link>
      <pubDate>Fri, 11 Oct 2019 19:03:34 +0800</pubDate>
      
      <guid>https://onenote.bytectl.com/post/lang/golang/vscode&#43;go/</guid>
      <description>1 2 3 4 5 6 7 8 9 10 11 12 13  GOPATH=$(go env GOPATH) mkdir -p ${GOPATH}/src/golang.org/x/ cd ${GOPATH}/src/golang.org/x/ git clone https://github.com/golang/tools.git git clone https://github.com/golang/lint.git git clone https://github.com/golang/sys.git go install golang.org/x/sys/windows  </description>
    </item>
    
    <item>
      <title>Go mod</title>
      <link>https://onenote.bytectl.com/post/lang/golang/go_mod/</link>
      <pubDate>Fri, 11 Oct 2019 19:03:33 +0800</pubDate>
      
      <guid>https://onenote.bytectl.com/post/lang/golang/go_mod/</guid>
      <description>go-mod 设置包下载代理 1 2 3 # Enable the go modules feature export GO111MODULE=on export GOPROXY=https://goproxy.io 初始化 法1: main包名 注释&amp;ndash;&amp;gt;模块名 1 2 3 4 5 6 7 8 9 10 11 12 // &amp;#34;github.com/example&amp;#34; 为模块名 package main //</description>
    </item>
    
    <item>
      <title>Grpc环境</title>
      <link>https://onenote.bytectl.com/post/lang/golang/grpc/</link>
      <pubDate>Fri, 11 Oct 2019 19:03:33 +0800</pubDate>
      
      <guid>https://onenote.bytectl.com/post/lang/golang/grpc/</guid>
      <description>1 2 3 4 5 6 7 8 9 10 11 12 13 14 GOPATH=$(go env GOPATH) git clone https://github.com/grpc/grpc-go.git $GOPATH/src/google.golang.org/grpc git clone https://github.com/golang/net.git $GOPATH/src/golang.org/x/net git clone https://github.com/golang/text.git $GOPATH/src/golang.org/x/text go get -u github.com/golang/protobuf/{proto,protoc-gen-go} git clone https://github.com/google/go-genproto.git $GOPATH/src/google.golang.org/genproto cd $GOPATH/src/ go install google.golang.org/grpc</description>
    </item>
    
    <item>
      <title>Golang环境</title>
      <link>https://onenote.bytectl.com/post/lang/golang/golang/</link>
      <pubDate>Fri, 11 Oct 2019 19:03:32 +0800</pubDate>
      
      <guid>https://onenote.bytectl.com/post/lang/golang/golang/</guid>
      <description>下载go开发包 1 2 # 根据自己的需求选择 http://golangtc.com/download 安装 Windows下 1 2 scoope install golang go env 其中GOPATH是你的工作（工程）目录你的代码都会在该目录下,GO</description>
    </item>
    
    <item>
      <title>Bazel</title>
      <link>https://onenote.bytectl.com/post/lang/golang/bazel/</link>
      <pubDate>Fri, 11 Oct 2019 19:03:29 +0800</pubDate>
      
      <guid>https://onenote.bytectl.com/post/lang/golang/bazel/</guid>
      <description>bazel bazel , 支持java , c go 等等组织编译. 这样即使服务是异构 不同语言开发,相同构建方式. 参考 1 https://blog.csdn.net/RA681t58CJxsgCkJ31/article/details/80504480 build的脚本 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16</description>
    </item>
    
    <item>
      <title>Delve</title>
      <link>https://onenote.bytectl.com/post/lang/golang/delve/</link>
      <pubDate>Fri, 11 Oct 2019 19:03:29 +0800</pubDate>
      
      <guid>https://onenote.bytectl.com/post/lang/golang/delve/</guid>
      <description>delve go 调试工具 安装 1 go get -u github.com/go-delve/delve/cmd/dlv 使用 本地调试 1 2 3 4 5 6 7 8 9 10 dlv debug main.go -- args # 编译 go build -gcflags=&amp;#39;-N -l&amp;#39; main.go dlv exec main -- args # git-bash中 winpty dlv debug main.go -- args # 已经运行的程</description>
    </item>
    
    <item>
      <title>String</title>
      <link>https://onenote.bytectl.com/post/lang/c_c&#43;&#43;/string/</link>
      <pubDate>Fri, 11 Oct 2019 19:00:23 +0800</pubDate>
      
      <guid>https://onenote.bytectl.com/post/lang/c_c&#43;&#43;/string/</guid>
      <description>c string 注: C语言中没有字符串这个特定类型, C语言风格字符串: 以&amp;rsquo;\0&amp;rsquo;作为结束符 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19</description>
    </item>
    
    <item>
      <title>Linux module</title>
      <link>https://onenote.bytectl.com/post/lang/c_c&#43;&#43;/linux_module/</link>
      <pubDate>Fri, 11 Oct 2019 19:00:22 +0800</pubDate>
      
      <guid>https://onenote.bytectl.com/post/lang/c_c&#43;&#43;/linux_module/</guid>
      <description>module 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #include&amp;lt;linux/init.h&amp;gt; //驱动初始化#include&amp;lt;linux/module.h&amp;gt; //驱动模块 MODULE_LICENSE(&amp;#34;Dual BSD/GPL&amp;#34;); //遵循lin</description>
    </item>
    
    <item>
      <title>c指针</title>
      <link>https://onenote.bytectl.com/post/lang/c_c&#43;&#43;/c_point/</link>
      <pubDate>Fri, 11 Oct 2019 19:00:21 +0800</pubDate>
      
      <guid>https://onenote.bytectl.com/post/lang/c_c&#43;&#43;/c_point/</guid>
      <description>c指针 改变一个变量，需要这个变量的地址 如果变量是数据，就需要指针 保存变量的地址 如果是指针，就需要二级指针保存指针变量的地址 指向行的指针 (指向</description>
    </item>
    
    <item>
      <title>储存类型</title>
      <link>https://onenote.bytectl.com/post/lang/c_c&#43;&#43;/c_stroge/</link>
      <pubDate>Fri, 11 Oct 2019 19:00:21 +0800</pubDate>
      
      <guid>https://onenote.bytectl.com/post/lang/c_c&#43;&#43;/c_stroge/</guid>
      <description>储存类型 auto static extern :extern变量又称全局变量，放在静态存储区 register 一个由C编译的程序占用的内存大致分为以下几部分： 栈区（stack）：由编译器自</description>
    </item>
    
    <item>
      <title>C 运算符</title>
      <link>https://onenote.bytectl.com/post/lang/c_c&#43;&#43;/c_operater/</link>
      <pubDate>Fri, 11 Oct 2019 19:00:20 +0800</pubDate>
      
      <guid>https://onenote.bytectl.com/post/lang/c_c&#43;&#43;/c_operater/</guid>
      <description>汇编语言&amp;amp;C语言混合编程 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #include&amp;lt;stdio.h&amp;gt;#include&amp;lt;stdlib.h&amp;gt;void main() { int num=5; //插入汇编语言 _asm{ mov eax,num add eax,5 mov num,eax } printf(&amp;#34;%d\n&amp;#34;, num); system(&amp;#34;pause&amp;#34;); } +,- 1 2 3 4 5 6 7 8 9 10 #include&amp;lt;stdio.h&amp;gt;#include&amp;lt;stdlib.h&amp;gt;void main()</description>
    </item>
    
    <item>
      <title>C基础输入输出</title>
      <link>https://onenote.bytectl.com/post/lang/c_c&#43;&#43;/c_base/</link>
      <pubDate>Fri, 11 Oct 2019 19:00:19 +0800</pubDate>
      
      <guid>https://onenote.bytectl.com/post/lang/c_c&#43;&#43;/c_base/</guid>
      <description>printf使用(不会进行数据类型转换) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 #include&amp;lt;stdio.h&amp;gt;#include&amp;lt;stdlib.h&amp;gt;void main() { int x = 123456; printf(&amp;#34;%d&amp;#34;, x); //以m指定的字段宽度输出，如果数据的位数 /</description>
    </item>
    
    <item>
      <title>Bm算法</title>
      <link>https://onenote.bytectl.com/post/gist/bm/</link>
      <pubDate>Fri, 11 Oct 2019 17:32:07 +0800</pubDate>
      
      <guid>https://onenote.bytectl.com/post/gist/bm/</guid>
      <description>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70</description>
    </item>
    
    <item>
      <title>Perftools</title>
      <link>https://onenote.bytectl.com/post/gist/perftools/</link>
      <pubDate>Fri, 11 Oct 2019 17:20:47 +0800</pubDate>
      
      <guid>https://onenote.bytectl.com/post/gist/perftools/</guid>
      <description>google-perftools google-perftools 是一款针对 C/C++ 程序的性能分析工具，它是一个遵守 BSD 协议的开源项目。使用该工具可以对 CPU时间片、内存等系统资源的分配和使用进行分析，本文将重</description>
    </item>
    
    <item>
      <title>Kmp算法</title>
      <link>https://onenote.bytectl.com/post/gist/kmp/</link>
      <pubDate>Fri, 11 Oct 2019 17:18:30 +0800</pubDate>
      
      <guid>https://onenote.bytectl.com/post/gist/kmp/</guid>
      <description>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70</description>
    </item>
    
    <item>
      <title>Tcmalloc</title>
      <link>https://onenote.bytectl.com/post/gist/tcmalloc/</link>
      <pubDate>Fri, 11 Oct 2019 17:16:25 +0800</pubDate>
      
      <guid>https://onenote.bytectl.com/post/gist/tcmalloc/</guid>
      <description>libunwind libunwind库为基于64位CPU和操作系统的程序提供了基本的堆栈辗转开解功能，其中包括用于输出堆栈跟踪的API、用于以编程方式辗转开</description>
    </item>
    
    <item>
      <title>函数跟踪</title>
      <link>https://onenote.bytectl.com/post/gist/%E5%87%BD%E6%95%B0%E8%B7%9F%E8%B8%AA/</link>
      <pubDate>Fri, 11 Oct 2019 17:11:27 +0800</pubDate>
      
      <guid>https://onenote.bytectl.com/post/gist/%E5%87%BD%E6%95%B0%E8%B7%9F%E8%B8%AA/</guid>
      <description>trace 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 /* * @Author: wuxingzhong * @Date: 2017-06-26 14:28:25 * @Email: 330332812@qq.com</description>
    </item>
    
    <item>
      <title>函数备忘</title>
      <link>https://onenote.bytectl.com/post/gist/%E5%87%BD%E6%95%B0%E5%A4%87%E5%BF%98/</link>
      <pubDate>Fri, 11 Oct 2019 17:10:46 +0800</pubDate>
      
      <guid>https://onenote.bytectl.com/post/gist/%E5%87%BD%E6%95%B0%E5%A4%87%E5%BF%98/</guid>
      <description>获取key-value 1 strtok gist 将结构体映射到0地址,计算成员偏移量 1 (int)&amp;amp;(((TYPE*)0)-&amp;gt;MEMBER ) 将结构体映射到0地址,计算成员占用大小 1 sizeof(((TYPE*)0)-&amp;gt;MEMBER ) ) 符号转字符串 1 #define STR(s) #s 字符</description>
    </item>
    
    <item>
      <title>Spring Cloud</title>
      <link>https://onenote.bytectl.com/post/framework/spring/spring-cloud/</link>
      <pubDate>Fri, 11 Oct 2019 17:01:53 +0800</pubDate>
      
      <guid>https://onenote.bytectl.com/post/framework/spring/spring-cloud/</guid>
      <description>start spring-boot-starter-web：全栈Web开发模块，包含嵌入式Tomcat、Spring MVC。 spring-boot-s</description>
    </item>
    
    <item>
      <title>Jvm资源限制</title>
      <link>https://onenote.bytectl.com/post/framework/spring/jvm%E8%B5%84%E6%BA%90%E9%99%90%E5%88%B6/</link>
      <pubDate>Fri, 11 Oct 2019 16:57:19 +0800</pubDate>
      
      <guid>https://onenote.bytectl.com/post/framework/spring/jvm%E8%B5%84%E6%BA%90%E9%99%90%E5%88%B6/</guid>
      <description>前言 参考: https://qingmu.io/2018/12/17/How-to-securely-limit-JVM-resources-in-a-container/ Java与Docker的结合，虽然更好的解决了application的封装问题。但也存在着不兼容，比如Java并不能自动的发现D</description>
    </item>
    
    <item>
      <title>Iptable</title>
      <link>https://onenote.bytectl.com/post/software/iptable/</link>
      <pubDate>Thu, 10 Oct 2019 19:24:53 +0800</pubDate>
      
      <guid>https://onenote.bytectl.com/post/software/iptable/</guid>
      <description>限流 1 2 3 4 5 iptables -A INPUT -p tcp –dport 443 -m limit --limit 100/sec --limit-burst 1000 -j ACCEPT -m limit --limit 100/sec 限制每秒连接请求数 –limit-burst：触发阀值，一次涌入数据包数量 连接追</description>
    </item>
    
    <item>
      <title>Httpd Tools</title>
      <link>https://onenote.bytectl.com/post/software/httpd-tools/</link>
      <pubDate>Thu, 10 Oct 2019 19:22:49 +0800</pubDate>
      
      <guid>https://onenote.bytectl.com/post/software/httpd-tools/</guid>
      <description>install 1 yum install httpd-tools ab 1 2 # 压测短连接 ab -n 1000 -c 100 10.108.167.100:9040/info</description>
    </item>
    
    <item>
      <title>Gitbook</title>
      <link>https://onenote.bytectl.com/post/software/gitbook/</link>
      <pubDate>Thu, 10 Oct 2019 19:20:37 +0800</pubDate>
      
      <guid>https://onenote.bytectl.com/post/software/gitbook/</guid>
      <description>安装 1 npm install gitbook-cli -g 安装calibre 参考 用于生成epub和mobi格式电子书 1 wget -nv -O- https://download.calibre-ebook.com/linux-installer.py | sudo python -c &amp;#34;import sys; main=lambda:sys.stderr.write(&amp;#39;Download failed\n&amp;#39;); exec(sys.stdin.read()); main()&amp;#34; 使用 1 2 3 4 5 6 # 创建书籍 gitbook init # 启动预</description>
    </item>
    
    <item>
      <title>Hugo</title>
      <link>https://onenote.bytectl.com/post/hugo/</link>
      <pubDate>Thu, 10 Oct 2019 09:23:18 +0800</pubDate>
      
      <guid>https://onenote.bytectl.com/post/hugo/</guid>
      <description>安装 1 2 3 4 5 6 # 使用gorpoxy export GOPROXY=https://goproxy.cn export GO111MODULE=on go get -v github.com/gohugoio/hugo hugo version 简单使用流程 建立site 1 hugo new site bytectl 配置主题 1 2 3 4 5 git clone https://github.com/xxx themes/xxx # 配置 cp themes/xxx/exampleSite/config.yaml ./ vim config.yaml 编写文章</description>
    </item>
    
    <item>
      <title>性能测试</title>
      <link>https://onenote.bytectl.com/post/gist/performance_test/</link>
      <pubDate>Wed, 11 Sep 2019 10:54:24 +0200</pubDate>
      
      <guid>https://onenote.bytectl.com/post/gist/performance_test/</guid>
      <description>性能测试工具 生成测试 编译 和链接时,添加参数 -pg 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 // 服务程序,添加如下代码: static void sighandler( int sig_no ) { exit(0); } int main(int argc, char* argv[]) { // 接收信号</description>
    </item>
    
  </channel>
</rss>